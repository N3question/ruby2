＝＝＝＝＝＝＝＝＝＝＝＝＝＝
・シンボルとは
・シンボルと文字列の違いとは
・使用する場面
＝＝＝＝＝＝＝＝＝＝＝＝＝＝

＜何ができるのか＞
シンボルがどういったものなのかを理解
文字列と使い分けて開発すること

＜シンボルとは＞
[At first] クラス名などの"名前"を整数で管理。
理由...名前を文字列で処理するよりも整数で処理する方が速いから

★シンボル...その整数をRubyのコード上で表現したもの
            見た目は文字列のようですが、
            内部では整数として扱われているオブジェクトということ
            
＜シンボルと文字列の違いとは＞
ー定義ー
シンボル...文字列の前にコロン(:)を定義
文字列...シングルクォーテーション（''）や
         ダブルクォーテーション（""）で囲んで定義
ーーーーーーーーーーーー
# シンボル
 :プログラミング学習
# 文字列
 "プログラミング学習"
ーーーーーーーーーーーー
         
ー変更ー
シンボル...更することができません
文字列...変更可能なオブジェクト

ー一意性ー
シンボル...同じオブジェクトを参照
※重複した定義を行なった場合、
 シンボルは同じオブジェクトを参照

object_idメソッド...オブジェクト固有のidを取得する。
#このidによって同じオブジェクトを参照しているのか、
#別のオブジェクトを参照しているのか確認する

ーーーーーーーーーーー
# 文字列オブジェクト
dog1 = "犬"
dog2 = "犬"

# シンボルオブジェクト
dog3 = :犬
dog4 = :犬

puts dog1.object_id
puts dog2.object_id
puts dog3.object_id
puts dog4.object_id
ーーーーーーーーーーー
[実行結果]
（文字列オブジェクトの場合）
70292126869460
70292126869440
（シンボルオブジェクトの場合>）　整数で管理しているので高速な処理が可能！
1058268
1058268
ーーーーーーーーーーー



＜どういう時に使うべきか＞
処理が高速であるため、検索などに使用すると良い
他には「データ型を学ぼう」で学習したハッシュのキーなど。

# hash.rbの例題
# 文字列」ではなく「シンボル」で記述
ーーーーーーーーーーーーーーーーーーーーーー
tall = {:太郎=>185, :二郎=>170, :花子=>150}
puts tall[:太郎]
ーーーーーーーーーーーーーーーーーーーーーー
[実行結果]
185
ーーーーーーーーーーーーーーーーーーーーーー
[解説]
tallというハッシュには、
「:太郎」とシンボルで登録

シンボルは、重複した定義を行なった場合、
同じオブジェクトを参照します。
つまり他のデータとは重複しないことが保証されている。
このように「同じものが複数あると困るもの」を
扱う時にシンボルが使われます。

